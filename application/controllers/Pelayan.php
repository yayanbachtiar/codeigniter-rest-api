<?php
/* 
 * Generated by CRUDigniter v2.3 Beta 
 * www.crudigniter.com
 */

require APPPATH . '/libraries/REST_Controller.php';

class Pelayan extends REST_Controller
{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Pelayan_model');
    } 

    /*
     * Listing of pelayan
     */
    function index()
    {
        $data = $this->Pelayan_model->get_all_pelayan();
		$this->response($data, REST_Controller::HTTP_OK);
    }

    /*
     * Adding a new pelayan
     */
    function index_post()
    {   
        if(isset($_POST) && count($_POST) > 0)     
        {   
            $params = array(
				'nama' => $this->input->post('nama'),
            );
            
            $this->Pelayan_model->add_pelayan($params);
            $message = ['message'=> "created", "code"=> true];            
			$this->set_response($message, REST_Controller::HTTP_CREATED);
        }
        else
        {
            $message = ['message'=> 'failed to insert', 'code'=> false];
			$this->set_response($message, REST_Controller::HTTP_CREATED);
        }
    }  

    /*
     * Editing a pelayan
     */
    function index_put($id)
    {   
        
        if(isset($pelayan['id']))
        {
            if(isset($_POST) && count($_POST) > 0)     
            {   
                $params = array(
					'nama' => $this->input->post('nama'),
                );

                $this->Pelayan_model->update_pelayan($id,$params);            
                $message = ['message'=> "successfully updated", 'code'=> true];
                $this->set_response($message, REST_Controller::HTTP_CREATED);
            }
        }
        else
            $message = ['message'=> 'failed to update', 'code'=> false];
            $this->set_response($message, REST_Controller::HTTP_NOT_FOUND);
 
    } 

    /*
     * Deleting pelayan
     */
    function index_delete($id)
    {
        $pelayan = $this->Pelayan_model->get_pelayan($id);
        $message = ["message"=>"data is not exist", "code" => false]; 
        // check if the pelayan exists before trying to delete it
        if(isset($pelayan['id']))
        {
            $this->Pelayan_model->delete_pelayan($id);
            $message = ['message'=>'successfull deleted', "code" => true];
			$this->set_response($message, REST_Controller::HTTP_OK);
        }
        else
            $this->set_response($message, REST_Controller::HTTP_NOT_FOUND); 
    }
    
}
